View(Poissonpower.bin)
View(Logpower.bin)
library(regpoweR)
devtools::document()
pnorm
?pnorm
library(regpoweR)
devtools::document()
Logpower.bin <- function(alpha=NULL, power=NULL, P0=NULL, OR=NULL, R=NULL, N=NULL) {
##################
# error messages #
##################
if(any(alpha < 0 | alpha > 1)) stop('alpha not between 0 and 1')
if(any(power < 0 | power > 1)) stop('power not between 0 and 1')
if(any(P0 < 0 | P0 > 1))       stop('P0 not between 0 and 1')
if(any(R < 0 | R > 1))         stop('R not between 0 and 1')
if(any(OR < 0))                stop('OR not a positive value')
if(any(N < 2))                 stop('N is less than 2')
#if(length(R > 1))              stop('R must be single value')
#if(length(R == 0))             stop('Must input value for R')
mylist = list(alpha, power, P0, OR, N)
l.mylist = lengths(mylist)
if(length(l.mylist[l.mylist>=2]) > 1) stop('Only vary one parameter at a time')
######################
# power calculations #
######################
# solve for alpha level #
if(is.null(alpha)) {
beta = 1 - power
P1 = (P0*OR) / (OR*P0 + 1 - P0)
Pbar = (1-R)*P0 + R*P1
A1 = sqrt(N*((P0-P1)^2)*(1-R))
A2 = stats::qnorm(1-beta)*sqrt(P0*(1-P0) + ((P1*(1-P1)*(1-R))/R))
A3 = sqrt(Pbar*(1-Pbar)/R)
A4 = (A1 - A2) / A3
alpha = 2*(1-stats::pnorm(A4))
alpha = round(alpha,3)
P1 = round(P1,3)
# output results #
results = NULL
if(length(power) > 1 | length(P0) > 1 | length(OR) > 1 | length(N) > 1) {
rownum = max(length(alpha), length(power), length(P0), length(OR))
for(i in 1:rownum) {
results = cbind(alpha, power, P0, P1, OR, R, N)
}
}
else {
results = c(alpha, power, P0, P1, OR, R, N)
results = data.frame(results)
results = t(results)
colnames(results) = c("alpha", "power", "P0", "P1", "OR", "R" ,"N")
}
}
# solve for power #
if(is.null(power)) {
P1 = (P0*OR) / (OR*P0 + 1 - P0)
Pbar = (1-R)*P0 + R*P1
A1 = sqrt(N*((P0-P1)^2)*(1-R))
A2 = stats::qnorm(1-alpha/2)* sqrt(Pbar*(1-Pbar)/R)
A3 = sqrt(P0*(1-P0) + ((P1*(1-P1)*(1-R))/R))
A4 = (A1 - A2) / A3
power = stats::pnorm(A4)
power = round(power,3)
P1 = round(P1,3)
# output results #
results = NULL
if(length(alpha) > 1 | length(P0) > 1 | length(OR) > 1 | length(N) > 1) {
rownum = max(length(alpha), length(power), length(P0), length(OR))
for(i in 1:rownum) {
results = cbind(alpha, power, P0, P1, OR, R, N)
}
}
else {
results = c(alpha, power, P0, P1, OR, R, N)
results = data.frame(results)
results = t(results)
colnames(results) = c("alpha", "power", "P0", "P1", "OR", "R" ,"N")
}
}
# solve for odds ratio #
if(is.null(OR)) {
beta = 1 - power
P1 = seq(0, .90, .00001)
N1 = N
OR = NULL
P1.new = NULL
maxlength = max(c(length(alpha), length(power), length(P0), length(N)))
if(maxlength==1) {
for(i in 1:length(P0)) {
Pbar = (1-R)*P0[i] + R*P1
n = (((stats::qnorm(1-alpha/2)* sqrt(Pbar*(1-Pbar)/R)) +
(stats::qnorm(1-beta)*sqrt(P0[i]*(1-P0[i]) + ((P1*(1-P1)*(1-R))/R))))^2) /
(((P0[i]-P1)^2) * (1-R))
or = (P1*(1-P0[i])) / (P0[i]*(1-P1))
N.N1 = abs(n - N1)
foo = cbind(P1,N,or, N.N1)
foo = foo[which(foo[,3] >= 1),]
x = foo[which.min(foo[,4]),]
or = x[[3]]
OR = c(OR, or)
OR = round(OR,3)
p1 = x[[1]]
P1.new = c(P1.new, p1)
P1.new = round(P1.new,3)
}
} else {
if (length(P0) > 1) {
for(i in 1:length(P0)) {
Pbar = (1-R)*P0[i] + R*P1
n = (((stats::qnorm(1-alpha/2)* sqrt(Pbar*(1-Pbar)/R)) +
(stats::qnorm(1-beta)*sqrt(P0[i]*(1-P0[i]) + ((P1*(1-P1)*(1-R))/R))))^2) /
(((P0[i]-P1)^2) * (1-R))
or = (P1*(1-P0[i])) / (P0[i]*(1-P1))
N.N1 = abs(n - N1)
foo = cbind(P1,N,or, N.N1)
foo = foo[which(foo[,3] >= 1),]
x = foo[which.min(foo[,4]),]
or = x[[3]]
OR = c(OR, or)
OR = round(OR,3)
p1 = x[[1]]
P1.new = c(P1.new, p1)
P1.new = round(P1.new,3)
}
}
if(length(N) > 1) {
for(i in 1:length(N)) {
Pbar = (1-R)*P0 + R*P1
n = (((stats::qnorm(1-alpha/2)* sqrt(Pbar*(1-Pbar)/R)) +
(stats::qnorm(1-beta)*sqrt(P0*(1-P0) + ((P1*(1-P1)*(1-R))/R))))^2) /
(((P0-P1)^2) * (1-R))
or = (P1*(1-P0)) / (P0*(1-P1))
N.N1 = abs(n - N1[i])
foo = cbind(P1, N[i], or, N.N1)
foo = foo[which(foo[,3] >= 1),]
x = foo[which.min(foo[,4]),]
or = x[[3]]
OR = c(OR, or)
OR = round(OR,3)
p1 = x[[1]]
P1.new = c(P1.new, p1)
P1.new = round(P1.new,3)
}
}
if(length(alpha) > 1) {
for(i in 1:length(alpha)) {
Pbar = (1-R)*P0 + R*P1
n = (((stats::qnorm(1-alpha[i]/2)* sqrt(Pbar*(1-Pbar)/R)) +
(stats::qnorm(1-beta)*sqrt(P0*(1-P0) + ((P1*(1-P1)*(1-R))/R))))^2) /
(((P0-P1)^2) * (1-R))
or = (P1*(1-P0)) / (P0*(1-P1))
N.N1 = abs(n - N1)
foo = cbind(P1, N, or, N.N1)
foo = foo[which(foo[,3] >= 1),]
x = foo[which.min(foo[,4]),]
or = x[[3]]
OR = c(OR, or)
OR = round(OR,3)
p1 = x[[1]]
P1.new = c(P1.new, p1)
P1.new = round(P1.new,3)
}
}
if(length(power) > 1) {
for(i in 1:length(power)) {
Pbar = (1-R)*P0 + R*P1
n = (((stats::qnorm(1-alpha/2)* sqrt(Pbar*(1-Pbar)/R)) +
(stats::qnorm(1-beta[i])*sqrt(P0*(1-P0) + ((P1*(1-P1)*(1-R))/R))))^2) /
(((P0-P1)^2) * (1-R))
or = (P1*(1-P0)) / (P0*(1-P1))
N.N1 = abs(n - N1)
foo = cbind(P1, N, or, N.N1)
foo = foo[which(foo[,3] >= 1),]
x = foo[which.min(foo[,4]),]
or = x[[3]]
OR = c(OR, or)
OR = round(OR,3)
p1 = x[[1]]
P1.new = c(P1.new, p1)
P1.new = round(P1.new,3)
}
}
}
# output results #
results = NULL
if(length(alpha) > 1 | length(power) > 1 | length(P0) > 1 | length(N) > 1) {
rownum = max(length(alpha), length(power), length(P0), length(OR))
for(i in 1:rownum) {
results = cbind(alpha, power, P0, P1.new, OR, R, N)
}
colnames(results) = c("alpha", "power", "P0", "P1", "OR", "R" ,"N")
}
else {
results = c(alpha, power, P0, P1.new, OR, R, N)
results = data.frame(results)
results = t(results)
colnames(results) = c("alpha", "power", "P0", "P1", "OR", "R" ,"N")
}
}
# solve for sample size (N) #
if(is.null(N)) {
beta = 1 - power
# first, solve for P1 #
#OR = P1(1-P0) / P0(1-P1)
P1 = (P0*OR) / (OR*P0 + 1 - P0)
#calculate Pbar #
Pbar = (1-R)*P0 + R*P1
A1 = stats::qnorm(1-alpha/2)* sqrt(Pbar*(1-Pbar)/R)
A2 = stats::qnorm(1-beta)*sqrt(P0*(1-P0) + ((P1*(1-P1)*(1-R))/R))
A3 = ((P0-P1)^2) * (1-R)
N = ((A1 + A2)^2) / A3
N = ceiling(N)
P1 = round(P1,3)
# output results #
results = NULL
if(length(alpha) > 1 | length(power) > 1 | length(P0) > 1 | length(OR) > 1) {
rownum = max(length(alpha), length(power), length(P0), length(OR))
for(i in 1:rownum) {
results = cbind(alpha, power, P0, P1, OR, R, N)
}
}
else {
results = c(alpha, power, P0, P1, OR, R, N)
results = data.frame(results)
results = t(results)
colnames(results) = c("alpha", "power", "P0", "P1", "OR", "R" ,"N")
}
}
return(results)
}
Logpower.bin(alpha=0.05, power=.90, P0=0.07, OR=1.5, R=.50)
Logpower.bin(alpha=0.05, power=.90, P0=0.07, OR=c(1.5,2.0), R=.50)
Logpower.bin(alpha=0.05, power=.90, P0=0.07, R=.50, N=3326)
Logpower.bin(power=.90, P0=0.07, OR=1.5, R=.50, N=3326)
Logpower.bin(alpha=0.05, P0=0.07, OR=1.5, R=.50, N=3326)
Poissonpower.bin <- function(alpha=NULL, power=NULL, exp.B0=NULL, exp.B1=NULL, muT=1,
phi=1, R2=0, pi.x1=NULL, N=NULL) {
##################
# error messages #
##################
if(any(alpha < 0 | alpha > 1))    stop('alpha not between 0 and 1')
if(any(power < 0 | power > 1))    stop('power not between 0 and 1')
if(any(N < 2))                    stop('N is less than 2')
if(any(muT < 1))                  stop('muT must be >= 1')
if(any(phi < 1))                  stop('phi must be >= 1')
if(any(R2 < 0))                   stop('R2 must be >= 0')
if(any(pi.x1 < 0 | pi.x1 > 1))    stop('pi.x1 not between 0 and 1')
if(length(muT) > 1)               stop('muT must be single value')
if(length(phi) > 1)               stop('phi must be single value')
if(length(R2) > 1)                stop('R2 must be single value')
mylist = list(alpha, power, exp.B0, exp.B1, pi.x1, N)
l.mylist = lengths(mylist)
if(length(l.mylist[l.mylist>=2]) > 1) stop('Only vary one parameter at a time')
# solve for alpha level #
if(is.null(alpha)) {
B0 = log(exp.B0)
B1 = log(exp.B1)
beta = 1 - power
var.x1 = pi.x1*(1-pi.x1)
var.beta1.0 = 1 / var.x1
var.beta1.B1 =  (1 / (1-pi.x1)) + (1 / (pi.x1*exp.B1))
A1 = sqrt((N * muT * exp.B0 * (B1^2) * (1-R2)) / phi)
A2 = stats::qnorm(1-beta) * sqrt(var.beta1.B1)
A3 = sqrt(var.beta1.0)
A4 = (A1 - A2) / A3
alpha = 2*(1-stats::pnorm(A4))     # two-sided test
#alpha = (1-stats::pnorm(A4))       # one-sided test
# output results #
results = NULL
if(length(power) > 1 | length(exp.B0) > 1 | length(exp.B1) > 1 | length(pi.x1) > 1 | length(N) > 1)  {
rownum = max(length(alpha), length(power), length(exp.B0))
for(i in 1:rownum) {
results = cbind(alpha, power, N, exp.B0, exp.B1, pi.x1)
}
colnames(results) = c("alpha", "power", "N", "baseline rate (exp.B0)", "IRR (exp.B1)", "X1 proportion (pi.x1)")
}
else {
results = c(alpha, power, N, exp.B0, exp.B1, pi.x1)
results = data.frame(results)
results = t(results)
colnames(results) = c("alpha", "power", "N", "baseline rate (exp.B0)", "IRR (exp.B1)",  "X1 proportion (pi.x1)")
}
}
# solve for power #
if(is.null(power)) {
B0 = log(exp.B0)
B1 = log(exp.B1)
beta = 1 - power
var.x1 = pi.x1*(1-pi.x1)
var.beta1.0 = 1 / var.x1
var.beta1.B1 =  (1 / (1-pi.x1)) + (1 / (pi.x1*exp.B1))
A1 = sqrt((N * muT * exp.B0 * (B1^2) * (1-R2)) / phi)
A2 = stats::qnorm(1-alpha/2) * sqrt(var.beta1.0)    # two-sided test
#A2 = stats::qnorm(1-alpha) * sqrt(var.beta1.0)      # one-sided test
A3 = sqrt(var.beta1.B1)
A4 = (A1 - A2) / A3
power = stats::pnorm(A4)     # two-sided test
# output results #
results = NULL
if(length(alpha) > 1 | length(exp.B0) > 1 | length(exp.B1) > 1 | length(pi.x1) > 1 | length(N) > 1)  {
rownum = max(length(alpha), length(power), length(exp.B0))
for(i in 1:rownum) {
results = cbind(alpha, power, N, exp.B0, exp.B1, pi.x1)
}
colnames(results) = c("alpha", "power", "N", "baseline rate (exp.B0)", "IRR (exp.B1)", "X1 proportion (pi.x1)")
}
else {
results = c(alpha, power, N, exp.B0, exp.B1, pi.x1)
results = data.frame(results)
results = t(results)
colnames(results) = c("alpha", "power", "N", "baseline rate (exp.B0)", "IRR (exp.B1)",  "X1 proportion (pi.x1)")
}
}
# solve for sample size N #
if(is.null(N)) {
B0 = log(exp.B0)
B1 = log(exp.B1)
beta = 1 - power
var.x1 = pi.x1*(1-pi.x1)
var.beta1.0 = 1 / var.x1
var.beta1.B1 =  (1 / (1-pi.x1)) + (1 / (pi.x1*exp.B1))
A1 = stats::qnorm(1-alpha/2) * sqrt(var.beta1.0)     # two-sided test
#A1 = stats::qnorm(1-alpha) * sqrt(var.beta1.0)     # one-sided test
A2 = stats::qnorm(1-beta) * sqrt(var.beta1.B1)
A3 =  muT * exp.B0 * (B1^2) * (1-R2)
N = phi * (A1 + A2)^2 / A3
N = ceiling(N)
# output results #
results = NULL
if(length(alpha) > 1 | length(power) > 1 | length(exp.B0) > 1 | length(exp.B1) > 1 | length(pi.x1) > 1) {
rownum = max(length(alpha), length(power), length(exp.B0))
for(i in 1:rownum) {
results = cbind(alpha, power, N, exp.B0, exp.B1, pi.x1)
}
colnames(results) = c("alpha", "power", "N", "baseline rate (exp.B0)", "IRR (exp.B1)", "X1 proportion (pi.x1)")
}
else {
results = c(alpha, power, N, exp.B0, exp.B1, pi.x1)
results = data.frame(results)
results = t(results)
colnames(results) = c("alpha", "power", "N", "baseline rate (exp.B0)", "IRR (exp.B1)",  "X1 proportion (pi.x1)")
}
}
# solve for incidence rate ratio #
if(is.null(exp.B1)) {
N1 = N
beta = 1 - power
exp.B1 = seq(1, 5, .00001)
exp.B1 = exp.B1[-1]
maxlength = max(c(length(alpha), length(power), length(exp.B0), length(N)))
vec.exp.B1 = NULL
if(maxlength==1) {
for(i in 1:length(exp.B0)) {
B0 = log(exp.B0[i])
B1 = log(exp.B1)
var.x1 = pi.x1*(1-pi.x1)
var.beta1.0 = 1 / var.x1
var.beta1.B1 =  (1 / (1-pi.x1)) + (1 / (pi.x1*exp.B1))
A1 = stats::qnorm(1-alpha/2) * sqrt(var.beta1.0)
A2 = stats::qnorm(1-beta) * sqrt(var.beta1.B1)
A3 = muT * exp.B0[i] * (B1^2) * (1-R2)
n = phi * ((A1 + A2)^2) / A3
foo = cbind(exp.B1,n)
N.N1 = abs(n-N1)
foo = cbind(exp.B1, N, N.N1)
x = foo[which.min(foo[,3]),]
exp.B1.new = round(x[[1]],4)
vec.exp.B1 = c(vec.exp.B1, exp.B1.new)
}
} else {
if (length(exp.B0) > 1) {
for(i in 1:length(exp.B0)) {
B0 = log(exp.B0[i])
B1 = log(exp.B1)
var.x1 = pi.x1*(1-pi.x1)
var.beta1.0 = 1 / var.x1
var.beta1.B1 =  (1 / (1-pi.x1)) + (1 / (pi.x1*exp.B1))
A1 = stats::qnorm(1-alpha/2) * sqrt(var.beta1.0)
A2 = stats::qnorm(1-beta) * sqrt(var.beta1.B1)
A3 = muT * exp.B0[i] * (B1^2) * (1-R2)
n = phi * ((A1 + A2)^2) / A3
foo = cbind(exp.B1,n)
N.N1 = abs(n-N1)
foo = cbind(exp.B1, N, N.N1)
x = foo[which.min(foo[,3]),]
exp.B1.new = round(x[[1]],4)
vec.exp.B1 = c(vec.exp.B1, exp.B1.new)
}
}
if(length(N) > 1) {
for(i in 1:length(N)) {
B0 = log(exp.B0)
B1 = log(exp.B1)
var.x1 = pi.x1*(1-pi.x1)
var.beta1.0 = 1 / var.x1
var.beta1.B1 =  (1 / (1-pi.x1)) + (1 / (pi.x1*exp.B1))
A1 = stats::qnorm(1-alpha/2) * sqrt(var.beta1.0)
A2 = stats::qnorm(1-beta) * sqrt(var.beta1.B1)
A3 = muT * exp.B0 * (B1^2) * (1-R2)
n = phi * ((A1 + A2)^2) / A3
foo = cbind(exp.B1, n)
N.N1 = abs(n - N1[i])
foo = cbind(exp.B1, N[i], N.N1)
x = foo[which.min(foo[,3]),]
exp.B1.new = round(x[[1]],4)
vec.exp.B1 = c(vec.exp.B1, exp.B1.new)
}
}
if(length(alpha) > 1) {
for(i in 1:length(alpha)) {
B0 = log(exp.B0)
B1 = log(exp.B1)
var.x1 = pi.x1*(1-pi.x1)
var.beta1.0 = 1 / var.x1
var.beta1.B1 =  (1 / (1-pi.x1)) + (1 / (pi.x1*exp.B1))
A1 = stats::qnorm(1-alpha[i]/2) * sqrt(var.beta1.0)
A2 = stats::qnorm(1-beta) * sqrt(var.beta1.B1)
A3 = muT * exp.B0 * (B1^2) * (1-R2)
n = phi * ((A1 + A2)^2) / A3
foo = cbind(exp.B1, n)
N.N1 = abs(n - N1)
foo = cbind(exp.B1, N, N.N1)
x = foo[which.min(foo[,3]),]
exp.B1.new = round(x[[1]],4)
vec.exp.B1 = c(vec.exp.B1, exp.B1.new)
}
}
if(length(power) > 1) {
for(i in 1:length(power)) {
B0 = log(exp.B0)
B1 = log(exp.B1)
var.x1 = pi.x1*(1-pi.x1)
var.beta1.0 = 1 / var.x1
var.beta1.B1 =  (1 / (1-pi.x1)) + (1 / (pi.x1*exp.B1))
A1 = stats::qnorm(1-alpha/2) * sqrt(var.beta1.0)
A2 = stats::qnorm(1-beta[i]) * sqrt(var.beta1.B1)
A3 = muT * exp.B0 * (B1^2) * (1-R2)
n = phi * ((A1 + A2)^2) / A3
foo = cbind(exp.B1, n)
N.N1 = abs(n - N1)
foo = cbind(exp.B1, N, N.N1)
x = foo[which.min(foo[,3]),]
exp.B1.new = round(x[[1]],4)
vec.exp.B1 = c(vec.exp.B1, exp.B1.new)
}
}
}
# output results #
results = NULL
if(length(alpha) > 1 | length(power) > 1 | length(exp.B0) > 1 | length(pi.x1) > 1 | length(N) > 1)  {
rownum = max(length(alpha), length(power), length(exp.B0))
for(i in 1:rownum) {
results = cbind(alpha, power, N, exp.B0, vec.exp.B1, pi.x1)
}
colnames(results) = c("alpha", "power", "N", "baseline rate (exp.B0)", "IRR (exp.B1)", "X1 proportion (pi.x1)")
}
else {
results = c(alpha, power, N, exp.B0, vec.exp.B1, pi.x1)
results = data.frame(results)
results = t(results)
colnames(results) = c("alpha", "power", "N", "baseline rate (exp.B0)", "IRR (exp.B1)",  "X1 proportion (pi.x1)")
}
}
return(results)
}
Poissonpower.bin(alpha=NULL, power=.80, exp.B0=.85, exp.B1=1.3, muT=1, phi=1,R2=0, pi.x1=.5, N=406)
Poissonpower.bin(alpha=NULL, power=.80, exp.B0=.85, exp.B1=1.3, muT=1, phi=1, R2=0, pi.x1=.5, N=406)
Poissonpower.bin(alpha=.05, power=.80, exp.B0=.85, exp.B1=1.3, muT=1, phi=1, R2=0, pi.x1=.5, N=NULL)
Poissonpower.bin(alpha=.05, power=.80, exp.B0=.85, exp.B1=NULL, muT=1, phi=1, R2=0, pi.x1=.5, N=406)
library(regpoweR)
devtools::document
devtools::document()
library(regpoweR)
?Logpower.bin
library(regpoweR)
?Logpower.bin
devtools::document()
?Logpower.bin
devtools::document()
library(regpoweR)
?Logpower.bin
library(regpoweR)
Logpower.bin
install(regpoweR)
devtools::install(regpoweR)
devtools::install("U:/Research Day 2018/regpoweR")
Logpower.bin
?Logpower.bin
library(regpoweR)
devtools::document()
Logpower.bin()
Logpower.bin
library(regpoweR)
devtools:document()
devtools::document()
?Logpower.bin
Logpower.bin
Logpower.bin(alpha=0.05, power=.90, P0=0.07, OR=1.5, R=.50)
Logpower.bin(alpha=0.05, power=.90, P0=0.07, OR=c(1.5,2.0), R=.50)
Logpower.bin(alpha=0.05, power=.90, P0=0.07, R=.50, N=3326)
Logpower.bin(power=.90, P0=0.07, OR=1.5, R=.50, N=3326)
Logpower.bin(alpha=0.05, P0=0.07, OR=1.5, R=.50, N=3326)
library(regpoweR)
devtools::document()
library(regpoweR)
devtools::document()
devtoolss::run_examples()
devtools::run_examples()
library(regpoweR)
devtools::document()
devtools::run_examples()
devtools::install()
